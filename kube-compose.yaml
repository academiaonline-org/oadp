apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy-with-pvc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: 'academiaonline/nginx:latest'
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: nginx-cache
              mountPath: /var/cache/nginx
              readOnly: false
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              readOnly: true
              subPath: nginx.conf
            - name: nginx-default
              mountPath: /etc/nginx/conf.d/default.conf
              readOnly: true
              subPath: default.conf
            - name: nginx-html
              mountPath: /usr/share/nginx/html/
              readOnly: true
            - name: nginx-run
              mountPath: /var/run
              readOnly: false
      volumes:
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-conf
          configMap:
            defaultMode: 400
            items:
              - key: nginx.conf
                path: nginx.conf
            name: nginx.conf
        - name: nginx-default
          secret:
            items:
              - key: default.conf
                path: default.conf
            defaultMode: 400
            secretName: default.conf
        - name: nginx-html
          persistentVolumeClaim:
            claimName: nginx-pvc
        - name: nginx-run
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx.conf
data:
    nginx.conf: |
        user  nginx;
        worker_processes  auto;

        error_log  /var/log/nginx/error.log warn;
        pid        /var/run/nginx.pid;


        events {
        worker_connections  1024;
        }


        http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
        }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: ocs-storagecluster-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: Secret
metadata:
  name: default.conf
stringData:
  default.conf: |
    server {
        listen       8080;
        #listen  [::]:8080;
        server_name  localhost;

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:8080
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  ports:
  - port: 8080
  selector:
    app: nginx
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: nginx-route
spec:
  tls:
    termination: edge
  to:
    kind: Service
    name: nginx-svc
